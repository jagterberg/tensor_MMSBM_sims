r <- 3
C <- array(runif(r^3),dim=rep(r,3))
C <- as.tensor(C)
p <- 100
ntrials <- 3
sigmas <- c(1,2)
finalres <- foreach(n = c(1:ntrials),.combine=cbind) %do% {
print(n)
toreturn <- foreach(j = c(1:length(sigmas)),.combine=rbind) %do% {
print(j)
return(runonesim(p,r,C,sigmamax = sigmas[j]))
}
return(toreturn)
}
finalres
print("got here!")
rm(list=ls())
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
print("got here!")
r <- 3
C <- array(runif(r^3),dim=rep(r,3))
C <- as.tensor(C)
p <- 100
ntrials <- 100
sigmas <- seq(20,100,5)
finalres <- foreach(n = c(1:ntrials),.combine=cbind) %do% {
print(n)
toreturn <- foreach(j = c(1:length(sigmas)),.combine=rbind) %do% {
print(j)
return(runonesim(p,r,C,sigmamax = sigmas[j]))
}
return(toreturn)
}
save(finalres,file = "sim_8-14.Rdata")
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
print("got here!")
r <- 3
C <- array(runif(r^3),dim=rep(r,3))
C <- as.tensor(C)
p <- 3
p <- 100
ntrials <- 3
sigmas <- seq(1,100,5)
sigmas <- seq(1,11,5)
finalres <- foreach(n = c(1:ntrials),.combine=cbind) %do% {
print(n)
toreturn <- foreach(j = c(1:length(sigmas)),.combine=rbind) %do% {
print(j)
return(runonesim(p,r,C,sigmamax = sigmas[j]))
}
return(toreturn)
}
View(finalres)
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
print("got here!")
r <- 3
C <- array(runif(r^3),dim=rep(r,3))
C <- as.tensor(C)
p <- 100
ntrials <- 3
sigmas <- seq(1,11,5)
sigmas <- seq(1,11,1)
finalres <- foreach(n = c(1:ntrials),.combine=cbind) %do% {
print(n)
toreturn <- foreach(j = c(1:length(sigmas)),.combine=rbind) %do% {
print(j)
return(runonesim(p,r,C,sigmamax = sigmas[j]))
}
return(toreturn)
}
finalres
View(finalres)
View(rowmeans(finalres))
View(rowMeans(finalres))
rowMeans(finalres)
rowMeans(finalres)/sigmas
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
print("got here!")
r <- 3
C <- array(runif(r^3),dim=rep(r,3))
C <- as.tensor(C)
ps <- seq(100,150,50)#500,50)
ntrials <- 3#10
sigmas <- seq(1,10,5)#100,10)
finalres <- foreach(p = ps) %do% {
print(p)
toreturn2 <-  foreach(n = c(1:ntrials),.combine=cbind) %do% {
print(n)
toreturn <- foreach(j = c(1:length(sigmas)),.combine=rbind) %do% {
print(j)
return(runonesim(p,r,C,sigmamax = sigmas[j]))
}
return(toreturn)
}
return(toreturn2)
}
rowMeans(finalres[[1]])
rowMeans(finalres[[2]])
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
print("got here!")
r <- 3
set.seed(9152022)
C <- array(runif(r^3),dim=rep(r,3))
C <- as.tensor(C)
ps <- seq(100,200)#,50)#500,50)
ntrials <- 10
sigmas <- seq(1,101,20)#100,10)
finalres <- foreach(p = ps) %do% {
print(p)
toreturn2 <-  foreach(n = c(1:ntrials),.combine=cbind) %do% {
print(n)
toreturn <- foreach(j = c(1:length(sigmas)),.combine=rbind) %do% {
print(j)
return(runonesim(p,r,C,sigmamax = sigmas[j]))
}
return(toreturn)
}
return(toreturn2)
}
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
print("got here!")
r <- 3
set.seed(9152022)
C <- array(runif(r^3),dim=rep(r,3))
C <- as.tensor(C)
ps <- seq(100,200)#,50)#500,50)
ntrials <- 3
sigmas <- seq(1,101,20)#100,10)
finalres <- foreach(p = ps) %do% {
print(paste0("p=",p))
toreturn2 <-  foreach(n = c(1:ntrials),.combine=cbind) %do% {
print(paste0("n=",n))
toreturn <- foreach(j = c(1:length(sigmas)),.combine=rbind) %do% {
#print(j)
return(runonesim(p,r,C,sigmamax = sigmas[j]))
}
return(toreturn)
}
return(toreturn2)
}
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
print("got here!")
r <- 3
set.seed(9152022)
C <- array(runif(r^3),dim=rep(r,3))
C <- as.tensor(C)
ps <- seq(100,200,100)#,50)#500,50)
ntrials <- 3
sigmas <- seq(1,101,20)#100,10)
finalres <- foreach(p = ps) %do% {
print(paste0("p=",p))
toreturn2 <-  foreach(n = c(1:ntrials),.combine=cbind) %do% {
print(paste0("n=",n))
toreturn <- foreach(j = c(1:length(sigmas)),.combine=rbind) %do% {
#print(j)
return(runonesim(p,r,C,sigmamax = sigmas[j]))
}
return(toreturn)
}
return(toreturn2)
}
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
print("got here!")
r <- 3
set.seed(9152022)
C <- array(runif(r^3),dim=rep(r,3))
C <- as.tensor(C)
ps <- seq(100,250,50)#,50)#500,50)
ntrials <- 3
sigmas <- seq(1,101,20)#100,10)
finalres <- foreach(p = ps) %do% {
print(paste0("p=",p))
toreturn2 <-  foreach(n = c(1:ntrials),.combine=cbind) %do% {
print(paste0("n=",n))
toreturn <- foreach(j = c(1:length(sigmas)),.combine=rbind) %do% {
#print(j)
return(runonesim(p,r,C,sigmamax = sigmas[j]))
}
return(toreturn)
}
return(toreturn2)
}
rowMeans(finalres[[1]])
rowMeans(finalres[[2]])
rowMeans(finalres[[3]])
rowMeans(finalres[[1]])/sigmas
rowMeans(finalres[[2]])/sigmas
rowMeans(finalres[[3]])/sigmas
eigen(C[,,1]@data %*% C[,,1]@data)
C <- array( runif(r^3,.5,1),dim=rep(r,3))
C <- as.tensor(C)
eigen(C[,,1]@data %*% C[,,1]@data)
eigen(C[,,1]@data %*% t(C[,,1]@data))
C <- array( runif(r^3,.8,1),dim=rep(r,3))
C <- as.tensor(C)
eigen(C[,,1]@data %*% t(C[,,1]@data))
C <- array( runif(r^3,1,3),dim=rep(r,3))
C <- as.tensor(C)
eigen(C[,,1]@data %*% t(C[,,1]@data))
C <- array( runif(r^3,3,5),dim=rep(r,3))
C <- as.tensor(C)
eigen(C[,,1]@data %*% t(C[,,1]@data))
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
print("got here!")
r <- 3
set.seed(9152022)
C <- array( runif(r^3,3,5),dim=rep(r,3))
C <- as.tensor(C)
eigen(C[,,1]@data %*% t(C[,,1]@data))
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
print("got here!")
r <- 3
set.seed(9152022)
C <- array(rnorm(prod(r)), dim=r) # Core tensor
C <- as.tensor(S.array)
C <- as.tensor(C)
# adjust minimal separation.
#delta.min = 100000
Sk = k_unfold(C, 1)@data
delta.min = sqrt(sum((Sk[1,] - Sk[2,])^2))
# adjust minimal separation.
#delta.min = 100000
delta = 10
Sk = k_unfold(C, 1)@data
delta.min = sqrt(sum((Sk[1,] - Sk[2,])^2))
for (i in 1:3){
Sk = k_unfold(S, i)@data
for (k1 in 1:(r[i]-1)){
for (k2 in (k1+1):r[i]){
delta.min = min(delta.min, sqrt(sum((Sk[k1,] - Sk[k2,])^2)))
}
}
}
Sk = k_unfold(C, 1)@data
delta.min = sqrt(sum((Sk[1,] - Sk[2,])^2))
for (i in 1:3){
Sk = k_unfold(C, i)@data
for (k1 in 1:(r[i]-1)){
for (k2 in (k1+1):r[i]){
delta.min = min(delta.min, sqrt(sum((Sk[k1,] - Sk[k2,])^2)))
}
}
}
r <- rep(3,3)
set.seed(9152022)
C <- array(rnorm(prod(r)), dim=r) # Core tensor
C <- as.tensor(C)
# adjust minimal separation.
#delta.min = 100000
delta = 10
Sk = k_unfold(C, 1)@data
delta.min = sqrt(sum((Sk[1,] - Sk[2,])^2))
for (i in 1:3){
Sk = k_unfold(C, i)@data
for (k1 in 1:(r[i]-1)){
for (k2 in (k1+1):r[i]){
delta.min = min(delta.min, sqrt(sum((Sk[k1,] - Sk[k2,])^2)))
}
}
}
C = C * delta / delta.min
#C <- array( ,dim=rep(r,3))
#C <- as.tensor(C)
eigen(C[,,1]@data %*% t(C[,,1]@data))
ps <- seq(100,200,50)#,50)#500,50)
ntrials <- 3
sigmas <- seq(1,101,50)#100,10)
finalres <- foreach(p = ps) %do% {
print(paste0("p=",p))
toreturn2 <-  foreach(n = c(1:ntrials),.combine=cbind) %do% {
print(paste0("n=",n))
toreturn <- foreach(j = c(1:length(sigmas)),.combine=rbind) %do% {
#print(j)
return(runonesim(p,r,C,sigmamax = sigmas[j]))
}
return(toreturn)
}
return(toreturn2)
}
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
print("got here!")
rs <- rep(3,3)
set.seed(9152022)
C <- array(rnorm(prod(rs)), dim=rs) # Core tensor
C <- as.tensor(C)
# adjust minimal separation.
#delta.min = 100000
delta = 10
Sk = k_unfold(C, 1)@data
delta.min = sqrt(sum((Sk[1,] - Sk[2,])^2))
for (i in 1:3){
Sk = k_unfold(C, i)@data
for (k1 in 1:(rs[i]-1)){
for (k2 in (k1+1):rs[i]){
delta.min = min(delta.min, sqrt(sum((Sk[k1,] - Sk[k2,])^2)))
}
}
}
C = C * delta / delta.min
r <- 3
#C <- array( ,dim=rep(r,3))
#C <- as.tensor(C)
eigen(C[,,1]@data %*% t(C[,,1]@data))
ps <- seq(100,200,50)#,50)#500,50)
ntrials <- 3
sigmas <- seq(1,101,50)#100,10)
finalres <- foreach(p = ps) %do% {
print(paste0("p=",p))
toreturn2 <-  foreach(n = c(1:ntrials),.combine=cbind) %do% {
print(paste0("n=",n))
toreturn <- foreach(j = c(1:length(sigmas)),.combine=rbind) %do% {
#print(j)
return(runonesim(p,r,C,sigmamax = sigmas[j]))
}
return(toreturn)
}
return(toreturn2)
}
rowMeans(finalres[[1]])/sigmas
rowMeans(finalres[[2]])/sigmas
rowMeans(finalres[[3]])/sigmas
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
print("got here!")
rs <- rep(3,3)
set.seed(9152022)
C <- array(rnorm(prod(rs)), dim=rs) # Core tensor
C <- as.tensor(C)
# adjust minimal separation.
#delta.min = 100000
delta = 10
Sk = k_unfold(C, 1)@data
delta.min = sqrt(sum((Sk[1,] - Sk[2,])^2))
for (i in 1:3){
Sk = k_unfold(C, i)@data
for (k1 in 1:(rs[i]-1)){
for (k2 in (k1+1):rs[i]){
delta.min = min(delta.min, sqrt(sum((Sk[k1,] - Sk[k2,])^2)))
}
}
}
C = C * delta / delta.min
r <- 3
#C <- array( ,dim=rep(r,3))
#C <- as.tensor(C)
eigen(C[,,1]@data %*% t(C[,,1]@data))
ps <- seq(100,200,50)#,50)#500,50)
ntrials <- 3
sigmas <- seq(1,50,10)#100,10)
finalres <- foreach(p = ps) %do% {
print(paste0("p=",p))
toreturn2 <-  foreach(n = c(1:ntrials),.combine=cbind) %do% {
print(paste0("n=",n))
toreturn <- foreach(j = c(1:length(sigmas)),.combine=rbind) %do% {
#print(j)
return(runonesim(p,r,C,sigmamax = sigmas[j]))
}
return(toreturn)
}
return(toreturn2)
}
rowMeans(finalres[[1]])/sigmas
rowMeans(finalres[[2]])/sigmas
rowMeans(finalres[[3]])/sigmas
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
print("got here!")
rs <- rep(3,3)
set.seed(9152022)
C <- array(rnorm(prod(rs)), dim=rs) # Core tensor
C <- as.tensor(C)
# adjust minimal separation.
#delta.min = 100000
delta = 10
Sk = k_unfold(C, 1)@data
delta.min = sqrt(sum((Sk[1,] - Sk[2,])^2))
for (i in 1:3){
Sk = k_unfold(C, i)@data
for (k1 in 1:(rs[i]-1)){
for (k2 in (k1+1):rs[i]){
delta.min = min(delta.min, sqrt(sum((Sk[k1,] - Sk[k2,])^2)))
}
}
}
C = C * delta / delta.min
r <- 3
#C <- array( ,dim=rep(r,3))
#C <- as.tensor(C)
eigen(C[,,1]@data %*% t(C[,,1]@data))
C <- array(rnorm(prod(rs),3,1), dim=rs) # Core tensor
C <- as.tensor(C)
# adjust minimal separation.
#delta.min = 100000
delta = 10
Sk = k_unfold(C, 1)@data
delta.min = sqrt(sum((Sk[1,] - Sk[2,])^2))
for (i in 1:3){
Sk = k_unfold(C, i)@data
for (k1 in 1:(rs[i]-1)){
for (k2 in (k1+1):rs[i]){
delta.min = min(delta.min, sqrt(sum((Sk[k1,] - Sk[k2,])^2)))
}
}
}
C = C * delta / delta.min
r <- 3
#C <- array( ,dim=rep(r,3))
#C <- as.tensor(C)
eigen(C[,,1]@data %*% t(C[,,1]@data))
# adjust minimal separation.
#delta.min = 100000
delta = 10
Sk = k_unfold(C, 1)@data
delta.min = min(svd(Sk)$d)
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
print("got here!")
rs <- rep(3,3)
set.seed(9152022)
C <- array(rnorm(prod(rs)), dim=rs) # Core tensor
C <- as.tensor(C)
# adjust minimal separation.
#delta.min = 100000
delta = 10
Sk = k_unfold(C, 1)@data
delta.min = min(svd(Sk)$d)
for (i in 1:3){
Sk = k_unfold(C, i)@data
for (k1 in 1:(rs[i]-1)){
for (k2 in (k1+1):rs[i]){
delta.min = min(delta.min, min(svd(Sk)$d))
}
}
}
C = C * delta / delta.min
r <- 3
#C <- array( ,dim=rep(r,3))
#C <- as.tensor(C)
eigen(C[,,1]@data %*% t(C[,,1]@data))
#C <- array( ,dim=rep(r,3))
#C <- as.tensor(C)
svd(C[,,1]@data )$d
rs <- rep(3,3)
set.seed(9152022)
C <- array(rnorm(prod(rs)), dim=rs) # Core tensor
C <- as.tensor(C)
# adjust minimal separation.
#delta.min = 100000
delta = 10
Sk = k_unfold(C, 1)@data
delta.min = min(svd(Sk)$d)
delta.min
for (i in 1:3){
Sk = k_unfold(C, i)@data
for (k1 in 1:(rs[i]-1)){
for (k2 in (k1+1):rs[i]){
delta.min = min(delta.min, min(svd(Sk)$d))
}
}
}
delta.min
C = C * delta / delta.min
#C <- array( ,dim=rep(r,3))
#C <- as.tensor(C)
svd(k_unfold(C,1)@data )$d
ps <- seq(100,200,50)#,50)#500,50)
ntrials <- 3
sigmas <- seq(1,50,10)#100,10)
finalres <- foreach(p = ps) %do% {
print(paste0("p=",p))
toreturn2 <-  foreach(n = c(1:ntrials),.combine=cbind) %do% {
print(paste0("n=",n))
toreturn <- foreach(j = c(1:length(sigmas)),.combine=rbind) %do% {
#print(j)
return(runonesim(p,r,C,sigmamax = sigmas[j]))
}
return(toreturn)
}
return(toreturn2)
}
rowMeans(finalres[[1]])/sigmas
rowMeans(finalres[[2]])/sigmas
rowMeans(finalres[[3]])/sigmas
?rbeta
source("misc.R")
source("SPAMM.R")
source("tensor_two_infty.R")
